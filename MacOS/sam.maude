
fmod SAM-Signature is
  protecting Util .
  sorts Atom Unit Structure Deriv DerivStructure Rewritable NeqRewritable .
  subsort Atom Unit < Structure < DerivStructure .
  subsort Deriv < DerivStructure .
  subsort Rewritable < NeqRewritable < Structure .

  op tt      : -> Unit .
  op ff      : -> Unit .
  op -_      : Atom -> Atom .
  op [_,_]   : Structure Structure -> Structure [comm assoc] .
  op {_,_}   : Structure Structure -> Structure [comm assoc] .
  op [_,_]   : Rewritable Rewritable -> Rewritable [comm assoc] .
  op {_,_}   : Rewritable Rewritable -> Rewritable [comm assoc] .
  op [_,_]   : NeqRewritable NeqRewritable -> NeqRewritable [comm assoc] .
  op {_,_}   : NeqRewritable NeqRewritable -> NeqRewritable [comm assoc] .
  op [_,_]   : DerivStructure DerivStructure -> DerivStructure [comm assoc] .
  op {_,_}   : DerivStructure DerivStructure -> DerivStructure [comm assoc] .

  op ___     : Structure Atom Structure -> Structure [prec 1] .
  op ___     : Rewritable Atom Rewritable -> Rewritable [prec 1] .
  op ___     : NeqRewritable Atom NeqRewritable -> NeqRewritable [prec 1] .
  op ___     : DerivStructure Atom DerivStructure -> DerivStructure [prec 1] .

  op _>[_]>_ : DerivStructure Qid DerivStructure -> Deriv [ gather (e & E) ] .
  
  op r : Structure -> Rewritable .
  op u : Structure -> NeqRewritable .

  var S T : DerivStructure .
  var Q : Qid .

  op nowt : -> Deriv .
  eq S >[Q]> nowt = S .

  ops a b c d e f g h i j none -> Atom .
  ops phi1 phi2 phi3 phi3 phi4 phi5 phi6 phi7 phi8 phi9 phi10 phi11 phi12 phi13 phi14 phi15 phi16 phi17 phi18 phi19 phi20 : -> Atom .
  var Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 Q10 : Qid .
  op err : -> Structure .

endfm

fmod NNF is
  including Util .
  including SAM-Signature .
  
  var R T U : Structure .

  eq - tt = ff .
  eq - ff = tt .
  eq - [ R , T ] = { - R , - T } .
  eq - { R , T } = [ - R , - T ] .
  eq - - R  = R .

endfm

mod SAM-Inf-test is
	protecting SAM-Signature .

	vars atm atm1 atm2 : Atom .
	vars A B C D : NeqRewritable .
	var e1 : Rewritable .
	vars DS1 DS2 S T : DerivStructure .
	vars U U1 U2 : Unit .
	vars Q Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 Q10 : Qid .
	vars N K : Nat .

    rl [c_down]   : e1  => unwrite(e1) >['c_down]> [ nospec(e1,0)  , nospec(e1,0) ]  .
	rl [c_up]     : { e1 , e1 } => unwrite({e1, e1}) >['c_up]> nospec(e1,1) . 


	rl [eq] 	   : { r(U) , r(U) } 			  =>  { U , U } >['eq]>	[ r(U) , r(U) ]  .
	rl [eq]		   : { DS1 >[Q1]> r(U) , r(U) }   =>  { DS1 >[Q1]> U , U } >['eq]> [ r(U), r(U) ] .
	rl [eq]		   : { DS1 >[Q1]> r(U) , DS2 >[Q2]> r(U) }   =>  { DS1 >[Q1]> U , DS2 >[Q2]> U } >['eq]> [ r(U), r(U) ] .
	
	rl [eq] 	   : [ r(U) , r(U) ] 			  =>  [ U , U ] >['eq]> { r(U) , r(U) }  .
	rl [eq]		   : [ DS1 >[Q1]> r(U) , r(U) ]   =>  [ DS1 >[Q1]> U , U ] >['eq]> { r(U), r(U) } .
	rl [eq]		   : [ DS1 >[Q1]> r(U) , DS2 >[Q2]> r(U) ]   =>  [ DS1 >[Q1]> U , DS2 >[Q2]> U ] >['eq]> { r(U), r(U) } .

	rl [a_down]    : [ A atm C , B atm D ]        => unwrite([ A atm C , B atm D ]) >['a_down]> enwrite([ A , B ] atm [ C , D ]) .
	rl [a_down]    : [ DS1 >[Q1]> A atm C, B atm D ] => unwrite([ DS1 >[Q1]> A atm C , B atm D ]) >['a_down]> enwrite([ A , B ] atm [ C , D ]) .
	rl [a_down]    : [ DS1 >[Q1]> A atm C, DS2 >[Q2]> B atm D ] => unwrite([ DS1 >[Q1]> A atm C , DS2 >[Q2]> B atm D ]) >['a_down]> enwrite([ A , B ] atm [ C , D ]) .

	rl [a_up] 	   : { A , C } atm { B , D }      => unwrite({ A , C } atm { B , D }) >['a_up]> enwrite({ A atm B , C atm D }) .
	rl [a_up]	   : (DS1 >[Q1]> { A , C }) atm { B , D } => unwrite((DS1 >[Q1]> { A , C }) atm { B , D }) >['a_up]> enwrite({ A atm B , C atm D }) .
	rl [a_up]	   : (DS1 >[Q1]> { A , C }) atm (DS2 >[Q2]> { B , D }) => unwrite((DS1 >[Q1]> { A , C }) atm (DS2 >[Q2]> { B , D })) >['a_up]> enwrite({ A atm B , C atm D }) .

	rl [conj_down] : [ { A , C } , [ B , D ] ]    => unwrite([ { A , C } , [ B , D ] ]) >['conj_down]>	enwrite({ [ A , B ] , [ C , D ] }) .
	rl [conj_down] : [ DS1 >[Q1]> { A , C } , [ B , D ] ] => unwrite([DS1 >[Q1]> { A , C } , [ B , D ]]) >['conj_down]>	enwrite({ [ A , B ] , [ C , D ] }) .
	rl [conj_down] : [ { A , C } , DS2 >[Q2]> [ B , D ] ] => unwrite([ { A , C } , DS2 >[Q2]> [ B , D ]]) >['conj_down]>	enwrite({ [ A , B ] , [ C , D ] }) .
	rl [conj_down] : [ DS1 >[Q1]> { A , C } , DS2 >[Q2]> [ B , D ] ] => unwrite([DS1 >[Q1]> { A , C } , DS2 >[Q2]> [ B , D ]]) >['conj_down]>	enwrite({ [ A , B ] , [ C , D ] }) .

	rl [disj_up]   : [ { A , C } , { B , D } ]    => unwrite([ { A , C } , { B , D } ])	>['disj_up]> enwrite({ [ A , B ] , { C , D } }) .
	rl [disj_up]   : [ DS1 >[Q1]> { A , C } , { B , D } ]    => unwrite([ DS1 >[Q1]> { A , C } , { B , D } ] )	>['disj_up]> enwrite({ [ A , B ] , { C , D } }) .
	rl [disj_up]   : [ DS1 >[Q1]> { A , C } , DS2 >[Q2]> { B , D } ]    => unwrite([ DS1 >[Q1]> { A , C } , DS2 >[Q2]> { B , D } ])	>['disj_up]> enwrite({ [ A , B ] , { C , D } }) .

	rl [m]         : { [ A , C ] , [ B , D ] }    => unwrite({ [ A , C ] , [ B , D ] })	>['m]> enwrite([ { A , B } , { C , D } ]) .
	rl [m]		   : { DS1 >[Q1]> [ A , C ] , [ B , D ] } => unwrite({ DS1 >[Q1]> [ A , C ] , [ B , D ] })	>['m]> enwrite([ { A , B } , { C , D } ]) .
	rl [m]		   : { DS1 >[Q1]> [ A , C ] , DS2 >[Q2]> [ B , D ] } => unwrite({ DS1 >[Q1]> [ A , C ] , DS2 >[Q2]> [ B , D ] })	>['m]> enwrite([ { A , B } , { C , D } ]) .

	rl [ac]        : [ A , C ] atm [ B , D ] => unwrite( [ A , C ] atm [ B , D ] ) >['ac]> enwrite([ A atm B , C atm D ]) .
	rl [ac]        : (DS1 >[Q1]> [ A , C ]) atm [ B , D ] => unwrite( (DS1 >[Q1]> [ A , C ]) atm [ B , D ] ) >['ac]> enwrite([ A atm B , C atm D ]) .
	rl [ac]        : (DS1 >[Q1]> [ A , C ]) atm (DS2 >[Q2]> [ B , D ]) => unwrite( (DS1 >[Q1]> [ A , C ]) atm (DS2 >[Q2]> [ B , D ]) ) >['ac]> enwrite([ A atm B , C atm D ]) .

	rl [acc]       : { A atm C , B atm D }        => unwrite({ A atm C , B atm D }) >['acc]> enwrite({ A , B } atm { C , D }) .
	rl [acc]       : { DS1 >[Q1]> A atm C , B atm D } => unwrite({ DS1 >[Q1]> A atm C , B atm D }) >['acc]> enwrite({ A , B } atm { C , D }) .
	rl [acc]       : { DS1 >[Q1]> A atm C , DS2 >[Q2]> B atm D } => unwrite({ DS1 >[Q1]> A atm C , DS2 >[Q2]> B atm D }) >['acc]> enwrite({ A , B } atm { C , D }) .

	op nospec : DerivStructure Nat -> DerivStructure .
	eq nospec( S, K ) = nospec( S, 0, K ) .

	op nospec : DerivStructure Nat Nat -> DerivStructure .
	ceq nospec( S, N, K ) = enwrite-nospec( S, N, K )
		if N =/= K .
	eq nospec( r(S), N, K ) = u(unwrite(S)) .
	eq nospec( u(S), N, K ) = u(unwrite(S)) .
	eq nospec( S, N, K ) =  u(unwrite(S)) .

	op enwrite-nospec : DerivStructure Nat Nat -> DerivStructure .
	eq enwrite-nospec( S >[Q]> T, N, K) = S >[Q]> nospec(T, N + 1, K) .
	eq enwrite-nospec( S atm T, N, K) = nospec(S, N + 1, K) atm nospec(T, N + 1, K) .
	eq enwrite-nospec( [S,T], N, K) = [ nospec(S, N + 1, K) , nospec(T, N + 1, K) ] .
	eq enwrite-nospec( {S,T}, N, K) = { nospec(S, N + 1, K) , nospec(T, N + 1, K) } .
	eq enwrite-nospec( u(S), N, K) = u(S) .
	eq enwrite-nospec( r(S), N, K) = u(S) .
	eq enwrite-nospec( S, N, K) = u(S) .

	op enwrite : DerivStructure -> DerivStructure  .
 	eq enwrite( S >[Q]> T ) = S >[Q]> enwrite(T) .
  	eq enwrite( S atm T ) = enwrite(S) atm enwrite(T) .
  	eq enwrite( [S,T] ) = [ enwrite(S) , enwrite(T) ] .
  	eq enwrite( {S,T} ) = { enwrite(S) , enwrite(T) } .
  	eq enwrite( u(S) ) = enwrite(S) .
  	eq enwrite( r(S) ) = enwrite(S) .
  	eq enwrite( S ) = r(S) .

  	op unwrite : DerivStructure -> DerivStructure .
  	eq unwrite( S >[Q]> T ) = unwrite(S) >[Q]> unwrite(T) .
  	eq unwrite( S atm T ) = unwrite(S) atm unwrite(T) .
  	eq unwrite( {S,T} ) = { unwrite(S) , unwrite(T) } .
  	eq unwrite( [S,T] ) = [ unwrite(S) , unwrite(T) ] .
  	eq unwrite( u(S) ) = unwrite(S) .
  	eq unwrite( r(S) ) = unwrite(S) .
 	eq unwrite( S ) = S .

 	op gtf : DerivStructure -> DerivStructure .
  	eq gtf( S >[Q]> T ) = gtf(T) .
  	eq gtf( [ S , T ] ) = [ gtf(S), gtf(T) ] .
  	eq gtf( { S , T } ) = { gtf(S), gtf(T) } .
  	eq gtf( S atm T ) = gtf(S) atm gtf(T) .
  	eq gtf( S ) = S .

  	op gbf : DerivStructure -> DerivStructure .
  	eq gbf( S >[Q]> T ) = gbf(S) .
  	eq gbf( [ S , T ] ) = [ gbf(S), gbf(T) ] .
  	eq gbf( { S , T } ) = { gbf(S), gbf(T) } .
  	eq gbf( S atm T ) = gbf(S) atm gbf(T) .
  	eq gbf( S ) = S .

endm

mod SAM-Inf is
	protecting SAM-Signature .

	var atm atm1 atm2 : Atom .
	var A B C D : Structure .
	var DS : DerivStructure .
	var U U1 U2 : Unit .
	var Q : Qid .

	rl [c_down]     : A  => [ A  , A ] .
	rl [c_up]       : { A , A } => A .

	rl [eq] 	   : { U , U } 					  =>	[ U , U ]  .
	rl [eq] 	   : [ U , U ] 					  =>	{ U , U }  .
	rl [a_down]    : [ A atm C , B atm D ]        => 	[ A , B ] atm [ C , D ] .
	rl [a_up] 	   : { A , C } atm { B , D }      => 	{ A atm B , C atm D } .
	rl [conj_down] : [ { A , C } , [ B , D ] ]    => 	{ [ A , B ] , [ C , D ] } .
	rl [disj_up]   : [ { A , C } , { B , D } ]    => 	{ [ A , B ] , { C , D } } .
	rl [m]         : { [ A , C ] , [ B , D ] }    => 	[ { A , B } , { C , D } ] .
	rl [s] 		   : [ { A , C } , B ] 			  =>    { [ A , B ] , C } .
	rl [ac]        : [ A , C ] atm [ B , D ]      =>    [ A atm B , C atm D ] .
	rl [acc]       : { A atm C , B atm D }        => 	{ A , B } atm { C , D } .
endm

mod SAM-Meta is
  protecting Util .
  protecting SAM-Inf .
  
  var Q Q1 Q2 Q3 Q4 Q5 Q6 Q7 Q8 Q9 Q10 : Qid .
  var phi1 phi2 phi3 phi4 : DerivStructure .
  vars atm1 atm2 : Atom .
  var DS DS1 DS2 : DerivStructure .
  var Trm : Term .
  var TL : TermList . 
  op error : -> DerivStructure .
 
  op gnf : DerivStructure -> DerivStructure .
  eq gnf ( DS ) = downTerm(gnf(upTerm( DS )), error) .

endm

mod SAM-Inf-Reverse is
	protecting SAM-Signature .

	var atm atm1 atm2 : Atom .
	var A B C D : Structure .
	var DS : DerivStructure .
	var U U1 U2 : Unit .
	var Q : Qid .

	rl [c_down-r]     :  [ A  , A ] =>  A .
	rl [c_up-r]       :  A => { A , A } .

    rl [eq-r] 	   : [ U , U ] 					  =>	{ U , U }  .
	rl [eq-r] 	   : { U , U } 					  =>	[ U , U ]  .
	rl [a_down-r]    : [ A , B ] atm [ C , D ]      => [ A atm C , B atm D ] .
	rl [a_up-r] 	   : { A atm B , C atm D } => { A , C } atm { B , D } .
	rl [conj_down-r] : { [ A , B ] , [ C , D ] } => [ { A , C } , [ B , D ] ] .
	rl [disj_up-r]   : { [ A , B ] , { C , D } } =>  [ { A , C } , { B , D } ]  .
	rl [m-r]         : [ { A , B } , { C , D } ] => { [ A , C ] , [ B , D ] } .
	rl [ac-r]        : [ A atm B , C atm D ] => [ A , C ] atm [ B , D ] .
	rl [acc-r]       : { A , B } atm { C , D } => { A atm C , B atm D } .
endm

mod SAM-Meta-Reverse is
    protecting Util .
    protecting SAM-Inf-Reverse .
endm

smod SamStr is
	protecting Util .
	protecting SAM-Inf-test .
	protecting QID .
	including META-LEVEL .
    including META-STRATEGY .
    including META-MODULE .
    including HELPER .

	strats app rles toprles applyRles spec topspec @ DerivStructure .
	strat depth : Nat @ DerivStructure .
	strats binop der der-no-depth depthSearch depthSearch1 clearDeriv : Nat Nat @ DerivStructure .
	op err : -> DerivStructure .

	vars S T P P1 P2 : DerivStructure .
	vars A B C D : Structure .
	vars Q Q1 Q2 Q3 Q4 Q5 op cnst : Qid .
	var atm : Atom .
	var V : Variable .
	vars TL TL1 TL2 : TermList .
	vars N K : Nat .	
    vars Trm Trm1 Trm2 : Term .
    var QL : QidList .

	op start : DerivStructure -> Term .
	op start : DerivStructure DerivStructure Nat -> Term .
	op start : DerivStructure DerivStructure -> Term .

	eq start( T ) = start( gbf(T), T ) .
	eq start( S , T ) = start( S , T, 0 ) .
	eq start( S , T, N ) =
		if metaSrewrite(['SamStr], upTerm(enwrite(S)) , 'init[[upTerm(upTerm(T))]], breadthFirst, N ) =/= failure then
			getTerm(metaSrewrite(['SamStr], upTerm(enwrite(S)) , 'init[[upTerm(upTerm(T))]] , breadthFirst, N ))
		else
			empty
		fi .

	strat init : Term @ DerivStructure .
	sd init( Trm ) := exa1(Trm) ; exa1(Trm) ; exa1(Trm) ; exa1(Trm) ; exa1(Trm) ; exa1(Trm) ; exa1(Trm) ; exa1(Trm) .

	strat exa1 : Term @ DerivStructure .
	sd exa1( Trm ) := isSolution( Trm ) or-else (app ; match S s.t. isMatch( upTerm(unwrite(S)) , expand(Trm) )) . 

	strat isSolution : Term @ DerivStructure .
	sd isSolution( Trm ) := match S s.t. ppp(upTerm(unwrite(S))) /\ isMatch(upTerm(unwrite(S)), Trm) .

	op isMatch : Term TermList -> Bool .
	eq isMatch( Trm1, TL ) = itr(remove-specs(Trm1, 'c_down 'c_up, 0), TL,0) .

	op remove-specs : Term QidList Nat -> Term .
	eq remove-specs( Trm, nil,  N ) = Trm .
	eq remove-specs( Trm, ( Q QL ), N ) = remove-specs(remove-spec(Trm, upTerm(Q), N), QL, N) .

	op remove-spec : Term Qid Nat -> Term .
	eq remove-spec(Trm, Q, N) =
		if metaXmatch(['SamStr], '_>`[_`]>_['S:Structure,Q,'T:Structure], Trm, nil, 0, unbounded, 0) =/= noMatch then
				remove-spec(
						replaceContext(getContext(metaXmatch(['SamStr], '_>`[_`]>_['S:Structure,Q,'T:Structure], Trm, nil, 0, unbounded, 0)),
							prem(substitute('_>`[_`]>_['S:Structure,Q,'T:Structure],
							getSubstitution(metaXmatch(['SamStr], '_>`[_`]>_['S:Structure,Q,'T:Structure], Trm, nil, 0, unbounded, 0))))),
						Q,
						N + 1)
		else
			Trm
		fi .

	op prem : Term -> Term .
	eq prem( '_>`[_`]>_[ Trm1 , Q , Trm2 ] ) = Trm1 .

	op itr : Term TermList Nat -> Bool .
	eq itr( Trm1, empty, N ) = false .
	eq itr( Trm1, (Trm,TL), N ) = 
		if metaMatch(['SamStr], Trm, Trm1, nil, 0) =/= noMatch then
			true
		else
			itr( Trm1, TL, N + 1 ) 
		fi .

	op expand : Term -> TermList .
	eq expand( '_>`[_`]>_[ Trm1 , Q , Trm2 ] ) =
		unpack-deriv( expand(Trm1), Q, (expand(Trm2),upTerm(nowt)) ,0) .
	eq expand( op [ Trm1, Trm2 ] ) = 
		unpack-structure(op, expand(Trm1), expand(Trm2), 0) .
	eq expand('___[ Trm1, cnst, Trm2 ] ) =
		unpack-subatom(expand(Trm1), cnst, expand(Trm2), 0) .  
	eq expand( Trm ) = Trm . 

	sd app := rles | ( depth(2) ; applyRles ) .
	sd applyRles := amatchrew S s.t. (not S :: Rewritable) by S using toprles .

	sd spec := c_down | c_up .
	sd topspec := top(c_down) | top(c_up) .

	sd rles := a_down | a_up | conj_down | disj_up | m | ac | acc | eq .
	sd toprles := top(a_down) | top(a_up) | top(conj_down) | top(disj_up) | top(m) | top(ac) | top(acc) | top(eq) .

	csd depth(K) := clearDeriv(0,K) or-else depthSearch(0,K)
		if K > 0 .

	sd clearDeriv( N , K ) :=
		matchrew S >[Q]> T by T using ( clearDeriv(N,K) or-else depthSearch(N,K)) .

	csd depthSearch( N, K ) := der( N , K ) or-else binop( N , K ) or-else matchrew A by A using topspec
		if N =/= K .

	sd der-no-depth( N , K ) :=
			matchrew S >[Q]> T by T using ( der-no-depth( N , K )  or-else topspec ) .
	sd der( N , K ) :=
			matchrew S >[Q]> T by T using ( der( N , K )  or-else ( topspec | depthSearch(N + 1, K ) ) ) .
	sd binop( N , K ) :=
			matchrew [S,T] by
				S using (( der( N , K )  or-else ( topspec | depthSearch(N + 1, K ) ) )  |  idle ),
				T using (  der( N , K )  or-else ( topspec | depthSearch(N + 1, K ) ) ) .
	sd binop( N , K ) :=
			matchrew {S,T} by
				S using (( der( N , K ) or-else ( topspec | depthSearch(N + 1, K ) ) )  |  idle  ),
				T using (  der( N , K ) or-else ( topspec | depthSearch(N + 1, K ) ) ) . 
	sd binop( N , K ) :=
			matchrew S atm T by S using ( der( N , K ) or-else ( topspec | depthSearch(N + 1, K ) ) ) |
			matchrew S atm T by T using ( der( N , K ) or-else ( topspec | depthSearch(N + 1, K ) ) ) | 
			matchrew S atm T by S using ( der-no-depth( N , K ) or-else ( topspec ) ) , T using ( der-no-depth( N , K ) or-else ( topspec ) ) .


	strat test1 : @ DerivStructure .
	sd test1 := match [S,T] .
	sd test1 := match {S,T} .


	op ppp : Term -> Bool .
	eq ppp( Trm ) = true [print Trm] .
endsm

***(
red downTerm(start(({[a,c],[e,g]}) a ({[b,d],[f,h]}), (({[a,c],[e,g]} >[Q6:Qid]> P1:Structure) a ({[b,d],[f,h]} >[Q7:Qid]> P2:Structure)) >[Q5:Qid]> ([{a,P3:Structure} a {b,P4:Structure} >[Q4:Qid]> {a a b,P5:Structure a P6:Structure},{c,P7:Structure} a {d,P8:Structure} >[Q3:Qid]> {c a d,P9:Structure a P10:Structure}] >[Q2:Qid]> {[a a b,c a d],{P11:Structure a P12:Structure,P13:Structure a P14:Structure} >[Q1:Qid]> (P15:Structure a P16:Structure >[Q:Qid]> [e a f,g a h]) })),E:Structure) .
*)

***( ((

{[a,c],[e,g]} >[Q6]> phi1) a ({[b,d],[f,h]} >[Q7]> phi2)) >[Q5]> ([{a,phi3} a {b,phi4} >[Q4]> {a a b,phi5 a phi6},{c,phi7} a {d,phi8} >[Q3]> {c a d,phi9 a phi10}] >[Q2]> {[a a b,c a d],{phi11 a phi12,phi13 a phi14} >[Q1]> (phi15 a phi16 >[Q:Qid]> [e a f,g a h]) }) *)