fmod S-INT is 
  protecting SAM-Signature .
  protecting Util .
 
  var A B C E : DerivStructure .
  var Struct1 Struct2 : Structure .
  var atm : Atom .
  vars U1 U2 U3 U4 : Unit .
  var Q Q1 : Qid .
  var DS1 DS2 : DerivStructure .
  op error : -> DerivStructure .

  op I : DerivStructure -> DerivStructure .
  op I* : DerivStructure -> Unit .

  op interpret-reduce : DerivStructure -> DerivStructure .
  eq interpret-reduce( DS1 ) = downTerm(interpret-helper(upTerm( DS1 )), error) .
  
  eq I( [ U1 , U2 ] atm [ U3 , U4 ] ) =  I ( I* ( [ U1 , U2 ] ) atm I* ( [ U3 , U4 ] ) ) .
  eq I( { U1 , U2 } atm { U3 , U4 } ) =  I ( I* ( { U1 , U2 } ) atm I* ( { U3 , U4 } ) ) .
  
  eq I*( { U1 , tt } ) = U1 .
  eq I*( { ff , ff } ) = ff .
  eq I*( [ U1 , ff ] ) = U1 .
  eq I*( [ tt , tt ] ) = tt .
  
  eq I( tt ) = tt .
  eq I( ff atm ff ) = ff .
  eq I( ff atm tt ) = atm .
  eq I( [ C , B ] ) = [ I( C ) , I( B ) ] .
  
  eq I( ff ) = ff .
  eq I( tt atm tt ) = tt .
  eq I( tt atm ff  ) = - atm .
  eq I( { A , B } ) = { I( A ) , I( B ) } .

  eq I( A ) = A .

endfm

fmod S-REP is
  protecting SAM-Signature .

  sort NegAtom .
  subsort NegAtom < Atom .
  op -_ : Atom -> NegAtom .
   
  var A B C Z : Structure .
  var atm atm1 atm2 atm3 : Atom .
  var U1 U2 U3 U4 : Unit .
  
  op R : Structure -> Structure .
  op E : Structure -> Structure .

  eq R ( [ - atm , U1 ] ) = [ R( - atm ) , U1 atm U1 ] .
  eq R ( [ atm , U1 ] ) = [ R( atm ) , U1 atm U1 ] .
  eq R ( { - atm , U1 } ) = { R( - atm ) , U1 atm U1 } .
  eq R ( { atm , U1 } ) = { R( atm ) , U1 atm U1 } .
  
  eq R ( E ( - atm  ) ) = [ tt , tt ] atm [ ff , ff ] .
  eq R ( E ( atm ) ) = [ ff , ff ] atm [ tt , tt ] .
  
  eq R ( - atm ) = tt atm ff .
  eq R ( { A , B } ) = { R( A ) , R( B ) } .
 
  ceq R ( atm ) =  ff atm tt
    if not ( atm :: NegAtom ) .

  ceq R ( [ A , B ] ) = [ R( A ) , R( B ) ]
     if not ( A :: Unit ) /\ not ( B :: Unit ) .
  
  eq R ( U1 ) = U1 .

endfm
