	
	op check : Term Term -> Term .
	op check1 : Term Term -> Term .
	op check2 : Term Term -> Term .
	op check3 : Term Term -> Term .
	op opt : Term Term -> Term .
	op opt1 : Term Term -> Term .
	
	op testeq : Term TermList -> Term .
	eq testeq ( Trm1, (Trm1 TL1) ) = Trm1 . 
	
	***	if Trm1 .
	
	
	eq check ( Trm1 , op [ '_>`[_`]>_[ Trm2 , Q , Trm3 ] , TL2 ] ) = 'here . ***(
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			*** now we have matching formulae
			test( '_>`[_`]>_[ Trm1 , Q , Trm3 ] )
		else
			check ( Trm1 , op [ TL2 ] )
		fi .
	)
	
	eq check ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) = 
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == Trm2 then
			test('_>`[_`]>_[ Trm1 , Q , Trm3 ])
		else
			'nahf
		fi .
		
	eq check ( Trm1 , op [ Trm2 , T2 ] ) =
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
		  check3 ( Trm1 , T2 )
		fi .
	
	eq check ( Trm1 , op [ Trm2 , TL2 ] ) =
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
			check1 ( Trm1 , op [ TL2 ] )
		fi .
		
	eq check1 ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) =
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == Trm2 then
			test('_>`[_`]>_[ Trm1 , Q , Trm3 ])
		else
			'nahf
		fi .
	
	eq check1 ( Trm1 , op [ Trm2 , T2 ] ) =
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
			check2 ( Trm1 , T2 )
		fi .
		
	eq check1 ( Trm1 , op [ Trm2 , TL2 ] ) =
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
			check ( Trm1 , op [ TL2 ] )
		fi .
		
	eq check2 ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) =
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == Trm2 then
			test('_>`[_`]>_[ Trm1 , Q , Trm3 ])
		else
			'nahf
		fi .
	
	eq check2 ( Trm1 , op [ Trm2 , T2 ] ) = 
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
			check3 ( Trm1 , T2 )
		fi .
	
	eq check2 ( Trm1 , op [ Trm2 , TL2 ] ) = 
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
			check2 ( Trm1 , op [ TL2 ] )
		fi .
		
		
	eq check3 ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) = 
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == Trm2 then
			test('_>`[_`]>_[ Trm1 , Q , Trm3 ])
		else
			'nahf
		fi .	
	
	eq check3 ( Trm1 , op [ Trm2 , T2 ] ) = 
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
			check3 ( Trm1 , T2 )
		fi .
	
	eq check3 ( Trm1 , op [ Trm2 , TL2 ] ) = 
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == getFormula(Trm2) then
			check( Trm1 , Trm2 )
		else
			check2 ( Trm1 , op [ TL2 ] )
		fi .

	eq check3 ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) = 
		if getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) == Trm2 then
			test('_>`[_`]>_[ Trm1 , Q , Trm3 ])
		else
			'nahf
		fi .

    eq check ( Trm1 , op [ empty ] ) = empty .
	
	eq opt( op1 [ Trm1 , T1 ] , op [ Trm2 , TL2 ] ) =
		op1 [ check ( Trm1 , op [ Trm2 , TL2 ] ) , check ( T1 , op [ Trm2 , TL2 ] ) ] .
	
		
	eq opt ( op [ Trm1 , TL1 ] , op [ Trm2 , TL2 ] ) = 
		op [ opt( Trm1 , op [ Trm2 , TL2 ] ) , opt ( op [ TL1 ] , op [ Trm2 , TL2 ] ) ] .
	

	eq check ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) =
		if check (Trm1 , Trm2 ) =/= nah then
			test('_>`[_`]>_[ check ( Trm1, Trm2 ) , Q , Trm3 ])
		else
			'nahf
		fi .
	
	eq check ( Trm1 , Trm2 ) =
		if 'true.Bool == getTerm ( metaReduce ( upModule( 'EQQ , false ) , 'equality[ getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) , Trm2 ] ) ) then 
			test ( Trm1 ) 
		else
			nah
		fi .
	
***reduce in S-Inf : opt( upTerm ( [ [ { [ff a tt,tt a ff], ff b tt } , ff c tt ], ff d tt] ) , upTerm( [ [ { [ a , - a ] > ['i]> tt , b } , c ] , d ] ) ) .




***(
eq check ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) = 
if 'true.Bool == getTerm ( metaReduce ( upModule( 'EQQ , false ) , 'equality[ getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) , Trm2 ] ) ) then 
	test ( '_>`[_`]>_[ Trm1 , Q , Trm3 ] )
else if 'true.Bool == getTerm ( metaReduce ( upModule( 'EQQ , false ) , 'equality[ getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) , getFormula(Trm2) ] ) ) then
	test('_>`[_`]>_[ check ( Trm1, Trm2 ) , Q , Trm3 ])
else
	'ohno
	***test ( '_>`[_`]>_[ Trm1 , Q , Trm3 ] )
fi fi .

  eq check ( op [ Trm1 , Trm2 ] , op [ '_>`[_`]>_[ T1 , Q , T2 ] , Trm3 ] ) =
    if check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) =/= nah then
		op [ check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm2 , Trm3 ) ]
	else
		op [ check ( Trm2 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm1 , Trm3 ) ] 
	fi .
	
  eq check ( op [ Trm1 , Trm2 ] , op [ Trm3 , '_>`[_`]>_[ T1 , Q , T2 ] ] ) = 
    if check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) =/= nah then
		op [ check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm2 , Trm3 ) ]
	else
		op [ check ( Trm2 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm1 , Trm3 ) ] 
	fi .
	
  eq check ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) =
    if check (Trm1 , Trm2 ) =/= nah then
		test('_>`[_`]>_[ check ( Trm1, Trm2 ) , Q , Trm3 ])
	else
		'nahf
	fi .
	
  eq check ( Trm1 , Trm2 ) =
	if 'true.Bool == getTerm ( metaReduce ( upModule( 'EQQ , false ) , 'equality[ getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) , Trm2 ] ) ) then 
		Trm1
	else
		nah
	fi . 
	
   eq check1 ( op [ Trm1 , TL1 ] , op [ '_>`[_`]>_[ T1 , Q , T2 ] , TL2 ] ) = 'assd . 
    if check1 ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) =/= nah then
		op [ check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm2 , Trm3 ) ]
	else
		op [ check ( Trm2 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm1 , Trm3 ) ] 
	fi .
	
	
  eq check1 ( op [ Trm1 , TL1 ] , op [ TL2 , '_>`[_`]>_[ T1 , Q , T2 ] ] ) = check1 ( TL1 , '_>`[_`]>_[ T1 , Q , T2 ] ) . 
    if check1 ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) =/= nah then
		op [ check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm2 , Trm3 ) ]
	else
		'k
		***op [ check ( Trm2 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm1 , Trm3 ) ] 
	fi .
	
	
  eq check1 ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) = check2 ( Trm1 , Trm2 ) . 
    if check1 (Trm1 , Trm2 ) =/= nah then
		test('_>`[_`]>_[ check ( Trm1, Trm2 ) , Q , Trm3 ])
	else
		'nahf
	fi .
	
	
	
  eq check2 ( op [ Trm1 , TL1 ] , op [ '_>`[_`]>_[ T1 , Q , T2 ] , TL2 ] ) = 'a . 
    if check1 ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) =/= nah then
		op [ check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm2 , Trm3 ) ]
	else
		op [ check ( Trm2 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm1 , Trm3 ) ] 
	fi .
	

  eq check2 ( op [ Trm1 , TL1 ] , op [ TL2 , '_>`[_`]>_[ T1 , Q , T2 ] ] ) = 'b . 
    if check1 ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) =/= nah then
		op [ check ( Trm1 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm2 , Trm3 ) ]
	else
		op [ check ( Trm2 , '_>`[_`]>_[ T1 , Q , T2 ] ) , check ( Trm1 , Trm3 ) ] 
	fi .
	
	
  eq check2 ( Trm1 , '_>`[_`]>_[ Trm2 , Q , Trm3 ] ) = 'cccccccccccccccccccccccccccccccc . 
    if check1 (Trm1 , Trm2 ) =/= nah then
		test('_>`[_`]>_[ check ( Trm1, Trm2 ) , Q , Trm3 ])
	else
		'nahf
	fi .
  
	
  eq check2 ( Trm1 , Trm2 ) =  Trm1 .
	if 'true.Bool == getTerm ( metaReduce ( upModule( 'EQQ , false ) , 'equality[ getTerm ( metaReduce ( upModule( 'S-INT , false) , 'I[ Trm1 ] ) ) , Trm2 ] ) ) then 
		Trm1
	else
		nah
	fi . 
	
	*** also for multiple derivs...
  ceq replace ( op [ Trm1, TL1 ] , Trm2 , N) =
	getReplacement(metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1], getTerm ( metaReduce(upModule('S-INT,false),'I['S:Structure]) ) = getFormula(ket(Trm2)) ,0,unbounded, 0 ))
	***
	if metaXmatch ( upModule ( 'S-Inf , false ), 'S:Structure, op [ Trm1, TL1 ], nil, 0, unbounded, N ) =/= noMatch then
		
		metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1], getTerm ( metaReduce(upModule('S-INT,false),'I['S:Structure]) ) = getFormula(ket(Trm2)) ,0,unbounded, 0 )
		
		***if getTerm(metaReduce(upModule('S-INT,false),'I[extractSubstitution(getSubstitution(metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1],nil,0,unbounded, N )))])) == getFormula(ket(Trm2)) then
			***extractContext(getContext(metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1],nil,0,unbounded,  N  )) , replace-conc( extractSubstitution(getSubstitution(metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1],nil,0,unbounded,N))),ket(Trm2)) )
		***else
		***	replace ( op [ Trm1 , TL1 ] , Trm2 , N + 1 ) 
		***fi 
	else
		error
	fi
	
	if ket(Trm2) =/= empty .
	
	
  ceq replace1 ( op [ Trm1, TL1 ] , Trm2 , N) =
	if metaXmatch ( upModule ( 'S-Inf , false ), 'S:Structure, op [ Trm1, TL1 ], nil, 0, unbounded, N ) =/= noMatch then
		if getTerm(metaReduce(upModule('S-INT,false),'I[extractSubstitution(getSubstitution(metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1],nil,0,unbounded, N )))])) == getFormula(ket(Trm2)) then
			extractContext(getContext(metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1],nil,0,unbounded,  N  )) , replace-conc( extractSubstitution(getSubstitution(metaXmatch(upModule('S-Inf,false),'S:Structure,op[Trm1,TL1],nil,0,unbounded,N))),ket(Trm2)) )
		else
			replace1 ( op [ Trm1 , TL1 ] , Trm2 , N + 1 ) 
		fi 
	else
		error
	fi
	if ket(Trm2) =/= empty .
	
	  op extractContext : Context Term -> Term .
  eq extractContext ( op [ TL , con ] , Trm2 ) = op [ TL , extractContext ( con , Trm2 ) ] .
  eq extractContext ( [] , Trm2 ) = Trm2 .
  
  op extractSubstitution : Substitution -> Term .
  eq extractSubstitution ( Trm1 <- Trm2 ) = Trm2 . 
  
   ***eq gnf ( op [ Trm1 , '_>`[_`]>_[T2 , Q1, T3 ] ] ) = op [ gnf ( Trm1 ) , gnf1( '_>`[_`]>_[T2 , Q1, T3 ] ) ] .
  ***eq gnf ( op [ Trm1 , Trm2 ] ) = op [ gnf(Trm1) , gnf(Trm2) ]  .
  ***eq gnf ( '_>`[_`]>_[ op [ T1 , '_>`[_`]>_[T2 , Q1, T3 ] ] , Q , Trm2 ] ) = test('_>`[_`]>_[ gnf ( op [ T1 , '_>`[_`]>_[T2 , Q1, T3 ] ] ) , Q , Trm2 ]) . ***test('_>`[_`]>_[ gnf ( op [ T1 , '_>`[_`]>_[T2 , Q1, T3 ] ] ) , Q , Trm2 ]) .
  ***eq gnf ( '_>`[_`]>_[ op [ '_>`[_`]>_[T2 , Q1, T3 ] , T1 ] , Q , Trm2 ] ) = test('_>`[_`]>_[ gnf ( op [ T1 , '_>`[_`]>_[T2 , Q1, T3 ] ] ) , Q , Trm2 ]) .
  ***eq gnf1 ( '_>`[_`]>_[ op [ T1 , '_>`[_`]>_[T2 , Q1, T3 ] ] , Q , Trm2 ] ) = test('_>`[_`]>_[ gnf2 ( op [ T1 , '_>`[_`]>_[T2 , Q1, T3 ] ] ) , Q , Trm2 ]) .
  ***eq gnf2 ( op [ Trm1 , '_>`[_`]>_[T2 , Q1, T3 ] ] ) = op [ gnf ( Trm1 ) , gnf( '_>`[_`]>_[T2 , Q1, T3 ] ) ] . 
  ***eq gnf ( '_>`[_`]>_[ Trm1 , Q , Trm2 ] ) = test ('_>`[_`]>_[ getTerm ( metaReduce ( upModule( 'S-REP , false ) , 'R[ Trm1 ] ) ) , Q , Trm2 ]) .
  
  
)



	