

fmod T is 
	protecting QID .

	sorts Unit Atom Formula Structure Derivation Rewritable UnRewritable .
	subsort Atom < Formula < Structure .
	subsort Unit < Structure .
	subsort Derivation < Structure .
	subsort Rewritable < Structure .
	subsort UnRewritable < Structure .

	op 1 	   : -> Unit .
	op 0 	   : -> Unit .

	op [_,_]   : Rewritable Rewritable -> Rewritable [comm assoc] .
	op {_,_}   : Rewritable Rewritable -> Rewritable [comm assoc] .

	op [_,_]   : Formula Formula -> Formula [comm assoc] .
	op {_,_}   : Formula Formula -> Formula [comm assoc] .

	op [_,_]   : Structure Structure -> Structure [comm assoc] .
	op {_,_}   : Structure Structure -> Structure [comm assoc] .

	op ___     : Rewritable Atom Rewritable -> Rewritable [prec 1] .
	op ___     : Formula Atom Formula -> Formula [prec 1] .
	op ___     : Structure Atom Structure -> Structure [prec 1] .

	op _>[_]>_ : Structure Qid Structure -> Derivation [ gather (E & e) ] .
	op r : Structure -> Rewritable .
	op u : Rewritable -> Structure .

    ops a b c d e : -> Atom .

endfm 


mod E is
	protecting T .


	var De1 De2 De3 De4 : Rewritable .
	var A B C D : Formula .
	var atm batm : Atom .
	var Q Q1 Q2 : Qid .
	vars S T : Structure .

  ***rl [eqq] : [ { r(A) , r(1) } , { r(0), r(0) } ] => [{A,1},{0,0}] >['eqq]> r(A) .
  ***rl [eqq] : r(A) => A >['eqq2]> [ { r(A) , r(1) }, { r(0), r(1) } ] .

  rl [eqq] : r(1)  =>
             1 >['eqq]> [ 1 , 1 ] .

  rl [eqq] : { r(0) , r(0) } =>
             { 0 , 0 } >['eqq]> r(0) .

  rl [eqq] : { r(A) , r(1) } =>
             { A , 1 } >['eqq]> r(A) .
  rl [eqq] : { S >[Q1]> r(A) , r(1) } =>
             { S >[Q1]> A , 1 } >['eqq]> r(A) .
  rl [eqq] : { r(A) , T >[Q2]> r(1) } =>
             { A , T >[Q2]> 1 } >['eqq]> r(A) .
  rl [eqq] : { S >[Q1]> r(A) , T >[Q2]> r(1) } =>
             { S >[Q1]> A , T >[Q2]> 1 } >['eqq]> r(A) .

  rl [eqq] : [ r(A) , r(0) ] =>
             [ A , 0 ] >['eqq]> r(A) .
  rl [eqq] : [ S >[Q1]> r(A) , r(0) ] =>
             [ S >[Q1]> A , 0 ] >['eqq]> r(A) .
  rl [eqq] : [ r(A) , T >[Q2]> r(0) ] =>
             [ A , T >[Q2]> 0 ] >['eqq]> r(A) .
  rl [eqq] : [ S >[Q1]> r(A) , T >[Q2]> r(0) ] =>
             [ S >[Q1]> A , T >[Q2]> 0 ] >['eqq]> r(A) .

  rl [eqq] : r(A) =>
             A >['eqq]> { r(A) , r(1) } .

  rl [eqq] : r(A) =>
             A >['eqq]> [ r(A) , r(0) ] .

  rl [eqq] : r(0) =>
             0 >['eqq]> r(0) a r(0) .

  rl [eqq] : r(1) =>
             1 >['eqq]> r(1) a r(1) .

  rl [eqq] : r(1) atm r(1) =>
             1 atm 1 >['eqq]> r(1) .

  rl [eqq] : r(0) atm r(0) =>
             0 atm 0 >['eqq]> r(0) .

  rl [one]   : r(A) => A >['one]> r(A) a r(0) .
  rl [two]   : r(A) => A >['two]> r(0) a r(A) .
  rl [three] : r(A) atm r(1) => A atm 1 >['three]> r(A) .
  rl [four]  : r(1) atm r(A) => 1 atm A >['four]> r(A) .

*** nbu
  rl [nbu] : { De1 atm De3 , De2 atm De4 }
    =>  unRewrite({ De1 atm De3 , De2 atm De4 })
    >['nbu]>
    { De1 , De2 } atm { De3 , De4 } .
  rl [nbu] : { S >[Q1]> De1 atm De3 , De2 atm De4 }
    =>  unRewrite({ S >[Q1]> De1 atm De3 , De2 atm De4 })
    >['nbu]>
    { De1 , De2 } atm { De3 , De4 } .
  rl [nbu] : { S >[Q1]> De1 atm De3 , T >[Q2]> De2 atm De4 }
    =>  unRewrite({ S >[Q1]> De1 atm De3 , T >[Q2]> De2 atm De4 })
    >['nbu]>
    { De1 , De2 } atm { De3 , De4 } .

*** ubu
  rl [ubu] : [ De1 atm De3 , De2 atm De4 ]
    =>  unRewrite([ De1 atm De3 , De2 atm De4 ])
    >['ubu]>
    [ De1 , De2 ] atm [ De3 , De4 ] .
  rl [ubu] : [ S >[Q1]> De1 atm De3 , De2 atm De4 ]
    =>  unRewrite([ S >[Q1]> De1 atm De3 , De2 atm De4 ])
    >['ubu]>
    [ De1 , De2 ] atm [ De3 , De4 ] .
  rl [ubu] : [ S >[Q1]> De1 atm De3 , T >[Q2]> De2 atm De4 ]
    =>  unRewrite([ S >[Q1]> De1 atm De3 , T >[Q2]> De2 atm De4 ])
    >['ubu]>
    [ De1 , De2 ] atm [ De3 , De4 ] .

*** uuu
  rl [uuu] : [ [ De1 , De3 ] , [ De2 , De4 ] ]
    => unRewrite([ [ De1 , De3 ] , [ De2 , De4 ] ])
    >['uuu]>
    [ [ De1, De2 ] , [ De1, De2 ] ] .

  rl [uuu] : [ S >[Q1]> [ De1 , De3 ] , [ De2 , De4 ] ]
    => unRewrite([ [ De1 , De3 ] , S >[Q1]> [ De2 , De4 ] ])
    >['uuu]>
    [ [ De1, De2 ] , [ De1, De2 ] ] .

  rl [uuu] : [ S >[Q1]> [ De1 , De3 ] , T >[Q2]> [ De2 , De4 ] ]
    => unRewrite([ S >[Q1]> [ De1 , De3 ] , T >[Q2]> [ De2 , De4 ] ])
    >['uuu]>
    [ [ De1, De2 ] , [ De1, De2 ] ] .

*** unu
  rl [unu] : [ { De1 , De3 } , [ De2 , De4 ] ]
    => unRewrite([ { De1 , De3 } , [ De2 , De4 ] ])
    >['unu]>
    { [ De1 , De2 ] , [ De3 , De4 ] } .

  rl [unu] : [ S >[Q1]> { De1 , De3 } , [ De2 , De4 ] ]
    => unRewrite([ S >[Q1]> { De1 , De3 } , [ De2 , De4 ] ])
    >['unu]>
    { [ De1 , De2 ] , [ De3 , De4 ] } .

  rl [unu] : [ { De1 , De3 } , T >[Q2]> [ De2 , De4 ] ]
    => unRewrite([ { De1 , De3 } , T >[Q2]> [ De2 , De4 ] ])
    >['unu]>
    { [ De1 , De2 ] , [ De3 , De4 ] } .       

  rl [unu] : [ S >[Q1]> { De1 , De3 } , T >[Q2]> [ De2 , De4 ] ]
    => unRewrite([ S >[Q1]> { De1 , De3 } , T >[Q2]> [ De2 , De4 ] ])
    >['unu]>
    { [ De1 , De2 ] , [ De3 , De4 ] } . 


*** nun
  rl [nun] :[ { De1 , De3 }, { De2 , De4 } ]  
    => unRewrite([ { De1 , De3 }, { De2 , De4 } ])
    >['nun]>
    { [ De1, De2 ] , [ De3, De4 ] } .

  rl [nun] : [ S >[Q1]> { De1 , De3 }, { De2 , De4 } ]    
    => unRewrite([ S >[Q1]> { De1 , De3 }, { De2 , De4 } ])
    >['nun]>
    { [ De1, De2 ] , [ De3, De4 ] } .

  rl [nun] : [ S >[Q1]> { De1 , De3 }, T >[Q2]> { De2 , De4 } ]      
    => unRewrite([ T >[Q1]> { De1 , De3 }, S >[Q2]> { De2 , De4 } ])
    >['nun]>
    { [ De1, De2 ] , [ De3, De4 ] } .

*** nnn
  rl [nnn] : { { De1 , De3 } , { De2 , De4 } }
    => unRewrite({ { De1 , De3 } , { De2 , De4 } })
    >['nnn]>
    { { De1, De2 } , { De3, De4 } } .

  rl [nnn] : { S >[Q1]> { De1 , De3 } , { De2 , De4 } }
    => unRewrite({ S >[Q1]> { De1 , De3 } , { De2 , De4 } })
    >['nnn]>
    { { De1, De2 } , { De3, De4 } } .

  rl [nnn] : { S >[Q1]> { De1 , De3 } , T >[Q2]> { De2 , De4 } }
    => unRewrite({ S >[Q1]> { De1 , De3 } , T >[Q2]> { De2 , De4 } })
    >['nnn]>
    { { De1, De2 } , { De3, De4 } } .


  *** nbn
  rl [nbn] : { De1 , De3 } atm { De2 , De4 } 
    => unRewrite({ De1 , De3 } atm { De2 , De4 })
    >['nbn]>
    { De1 atm De2, De3 atm De4 } .

  rl [nbn] : (S >[Q1]> { r(De1) , r(De3) }) atm { De2 , De4 }
    => unRewrite((S >[Q1]> { De1 , De3 }) atm { De2 , De4 })
    >['nbn]>
    { De1 atm De2, De3 atm De4 } .

  rl [nbn] : (S >[Q1]> { De1 , De3 }) atm (T >[Q2]> { De2 , De4 })
    => unRewrite((S >[Q1]> { De1 , De3 }) atm (T >[Q2]> { De2 , De4 }))
    >['nbn]>
    { De1 atm De2, De3 atm De4 } .

*** nuu
  rl [nuu] : { [ De1 , De3 ] , [ De2 , De4 ] }
    => unRewrite({ [ De1 , De3 ] , [ De2 , De4 ] })
    >['nuu]>
    [ { De1, De2 } , { De3, De4 } ] .

  rl [nuu] : { S >[Q1]> [ De1 , De3 ] , [ De2 , De4 ] }
    => unRewrite({ S >[Q1]> [ De1 , De3 ] , [ De2 , De4 ] })
    >['nuu]>
    [ { De1, De2 } , { De3, De4 } ] .

  rl [nuu] : { S >[Q1]> [ De1 , De3 ] , T >[Q2]> [ De2 , De4 ] }
    => unRewrite({ S >[Q1]> [ De1 , De3 ] , T >[Q2]> [ De2 , De4 ] })
    >['nuu]>
    [ { De1, De2 } , { De3, De4 } ] .

*** uun
  rl [uun] : [ [ De1 , De3 ] , [ De2 , De4 ] ]
    => unRewrite([ [ De1 , De3 ] , [ De2 , De4 ] ])
    >['uun]>
    [ [ De1, De2 ] , { De3, De4 } ] .
             
  rl [uun] : [ S >[Q1]> [ De1 , De3 ] , [ De2 , De4 ] ]
    => unRewrite([ S >[Q1]> [ De1 , De3 ] , [ De2 , De4 ] ])
    >['uun]>
    [ [ De1, De2 ] , { De3, De4 } ] .
             
  rl [uun] : [ S >[Q1]> [ De1 , De3 ] , T >[Q2]> [ De2 , De4 ] ]
    => unRewrite([ S >[Q1]> [ De1 , De3 ] , T >[Q2]> [ De2 , De4 ] ])
    >['uun]>
    [ [ De1, De2 ] , { De3, De4 } ] .
             
*** ubn
  rl [ubn] : [ De1 , De3 ] atm [ De2 , De4 ]
    => unRewrite([ De1 , De3 ] atm [ De2 , De4 ])
    >['ubn]>
    [ De1 atm De2 , De3 atm De4 ] .

  rl [ubn] : (S >[Q1]> [ De1 , De3 ]) atm [ De2 , De4 ]
    => unRewrite((S >[Q1]> [ De1 , De3 ]) atm [ De2 , De4 ])          
    >['ubn]>
    [ De1 atm De2 , De3 atm De4 ] .

  rl [ubn] : (S >[Q1]> [ De1 , De3 ]) atm (T >[Q2]> [ De2 , De4 ])
  	=> unRewrite((S >[Q1]> [ De1 , De3 ]) atm (T >[Q2]> [ De2 , De4 ]))
    >['ubn]>
    [ De1 atm De2 , De3 atm De4 ] .
              

*** auu
  rl [auu] : [ De1 , De3 ] atm [ De2 , De4 ]
    => unRewrite([ De1 , De3 ] atm [ De2 , De4 ])                             
    >['auu]>
    [ De1 atm De2 , De3 atm De4 ] .

  rl [auu] : (S >[Q1]> [ De1 , De3 ]) atm [ De2 , De4 ]
    => unRewrite((S >[Q1]> [ De1 , De3 ]) atm [ De2 , De4 ])                  
    >['auu]>
    [ De1 atm De2 , De3 atm De4 ] .
             
  rl [auu] : (S >[Q1]> [ De1 , De3 ]) atm (T >[Q2]> [ De2 , De4 ])
    => unRewrite((S >[Q1]> [ De1 , De3 ]) atm (T >[Q2]> [ De2 , De4 ])) 
    >['auu]>
    [ De1 atm De2 , De3 atm De4 ] .
            

*** anu
  rl [anu] : { De1 , De3 } atm [ De2 , De4 ]
          => unRewrite({ De1 , De3 } atm [ De2 , De4 ])
            >['anu]>
            { De1 atm De2 , De3 atm De4 } .
  rl [anu] : (S >[Q1]> { De1 , De3 }) atm [ De2 , De4 ]
          => unRewrite((S >[Q1]> { De1 , De3 }) atm [ De2 , De4 ])
            >['anu]>
            { De1 atm De2 , De3 atm De4 } .
  rl [anu] : { De1 , De3 } atm (T >[Q2]> [ De2 , De4 ])
          => unRewrite({ De1 , De3 } atm (T >[Q2]> [ De2 , De4 ]))
            >['anu]>
            { De1 atm De2 , De3 atm De4 } .
  rl [anu] : (S >[Q1]> { De1 , De3 }) atm (T >[Q2]> [ De2 , De4 ])
          => unRewrite((S >[Q1]> { De1 , De3 }) atm (T >[Q2]> [ De2 , De4 ]))
            >['anu]>
            { De1 atm De2 , De3 atm De4 } .


*** abu
  rl [abu] : ( De1 batm De3 ) atm ( De2 batm De4 )
          => unRewrite(( De1 batm De3 ) atm ( De2 batm De4 ))
            >['abu]>
            ( De1 atm De2 ) batm ( De3 atm De4 ) .
  rl [abu] : (S >[Q1]> ( De1 batm De3 )) atm ( De2 batm De4 )
          => unRewrite((S >[Q1]> ( De1 batm De3 )) atm ( De2 batm De4 ))
            >['abu]>
            ( De1 atm De2 ) batm ( De3 atm De4 )  .
           
  rl [abu] : (S >[Q1]> ( De1 batm De3 )) atm (T >[Q2]> ( De2 batm De4 ))
          => unRewrite((S >[Q1]> ( De1 batm De3 )) atm (T >[Q2]> ( De2 batm De4 )))
            >['abu]>
            ( De1 atm De2 ) batm ( De3 atm De4 ) .

*** aun
  rl [aun] : [ De1 atm De3 , De2 atm De4 ]
          => unRewrite([ De1 atm De3 , De2 atm De4 ])
            >['aun]>
            [ De1, De2 ] atm [ De3, De4 ] .
  rl [aun] : S >[Q1]> [ De1 atm De3 , De2 atm De4 ]
          => unRewrite( S >[Q1]> [ De1 atm De3 , De2 atm De4 ])
            >['aun]>
            [ De1, De2 ] atm [ De3, De4 ] .
  rl [aun] : [ S >[Q1]> De1 atm De3 , T >[Q2]> De2 atm De4 ]
          => unRewrite([ S >[Q1]> De1 atm De3 , T >[Q2]> De2 atm De4 ])
            >['aun]>
             [ De1, De2 ] atm [ De3, De4 ] .

*** ann
  rl [ann] : { De1 atm De3 , De2 atm De4 }
          => unRewrite({ De1 atm De3 , De2 atm De4 })
            >['ann]>
            { De1 , De2 } atm { De3 , De4 } . 
  rl [ann] : r({ S >[Q1]> r(r(De1) atm r(De3)) , r(r(De2) atm r(De4)) })
          => unRewrite({ S >[Q1]> De1 atm De3 , De2 atm De4 })
            >['ann]>
            { De1 , De2 } atm { De3 , De4 } .
  rl [ann] : r({ S >[Q1]> r(r(De1) atm r(De3)) , T >[Q2]> r(r(De2) atm r(De4)) })
          => unRewrite({ S >[Q1]> De1 atm De3 , T >[Q2]> De2 atm De4 })
            >['ann]>
            { De1 , De2 } atm { De3 , De4 } .

  op unRewrite : Structure -> Structure .
  eq unRewrite( S >[Q]> T ) = unRewrite(S) >[Q]> unRewrite(T) .
  eq unRewrite( S atm T ) = unRewrite(S) atm unRewrite(T) .
  eq unRewrite( {S,T} ) = { unRewrite(S) , unRewrite(T) } .
  eq unRewrite( [S,T] ) = [ unRewrite(S) , unRewrite(T) ] .
  eq unRewrite( r(S) ) = unRewrite(S) .
  eq unRewrite( S ) = S .

  op gtf : Structure -> Structure .
  eq gtf( S >[Q]> T ) = gtf(T) .
  eq gtf( [ S , T ] ) = [ gtf(S), gtf(T) ] .
  eq gtf( { S , T } ) = { gtf(S), gtf(T) } .
  eq gtf( S atm T ) = gtf(S) atm gtf(T) .
  eq gtf( S ) = S .

*** srew [1] [{r(b),r(1) a r(0)},{r(0) a r(1),r(c)}] using all ; all ; all ; all ; all ; all ; all ; all ; all ; all ; match S:Structure s.t. gtf(S:Structure) = r(b) a [r(c),r(0)] . 
endm


smod S is

	protecting T .
	protecting E .

	strat apply : Structure @ Structure .

	var R S T : Structure .


	sd apply(R) := all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else 
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else 
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; (match S s.t. unRewrite(gtf(S)) = R or-else
				   all ; match S s.t. unRewrite(gtf(S)) = R)))))))))) .


endsm